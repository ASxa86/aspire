name: GCC

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: update apt
      run: sudo apt update
    
    # Install system dependencies required to build vcpkg dependencies.
    - name: os-dependencies
      run: sudo apt install libx11-dev mesa-common-dev libxi-dev libxext-dev libxinerama-dev libxcursor-dev libglu1-mesa-dev xorg-dev g++-12 && echo "CXX=g++-12" >> $GITHUB_ENV
    
    - name: vcpkg-clone
      run: git clone https://github.com/microsoft/vcpkg.git    

    - name: Configure
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake --preset gcc-debug

    - name: Build
      # Build your program with the given configuration
      run: cmake --build --preset gcc-debug

    - name: Test
      working-directory: ${{github.workspace}}/build/bin
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./test-aspire --gtest_filter=-Graphics*
