stages:
  - lint
  - build
  - test

default:
  interruptible: true

variables:
  NUGET_SOURCE: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/nuget/index.json"
  NUGET_NAME: gitlab
  VCPKG_VERSION: 2024.07.12
  VCPKG_BINARY_SOURCES: "clear;nuget,${NUGET_NAME},readwrite"
  CMAKE_COMMAND: ${CI_PROJECT_DIR}/vcpkg/downloads/tools/cmake-3.29.2-linux/cmake-3.29.2-linux-x86_64/bin/cmake
  NUGET_COMMAND: ${CI_PROJECT_DIR}/vcpkg/downloads/tools/nuget-6.10.0-linux/nuget.exe

.get-dependencies: &get-dependencies
  - apt install autoconf libtool

.get-vcpkg: &get-vcpkg
  # Get vcpkg
  - git clone https://github.com/microsoft/vcpkg.git --depth 1 --branch ${VCPKG_VERSION}
  - ./vcpkg/bootstrap-vcpkg.sh
  - ./vcpkg/vcpkg fetch nuget --x-wait-for-lock
  - ./vcpkg/vcpkg fetch cmake --x-wait-for-lock

  # Configure NuGet
  - mono ${NUGET_COMMAND} sources add -source ${NUGET_SOURCE} -name ${NUGET_NAME} -username gitlab-ci-token -password $CI_JOB_TOKEN

lint-clang-tidy:
  image: $CI_REGISTRY/asxa86/images/ubuntu-dev:latest
  stage: lint
  needs: []
  tags:
    - saas-linux-medium-amd64
  script:
    - *get-dependencies
    - *get-vcpkg

    # Configure Aspire
    - ${CMAKE_COMMAND} --preset clang-debug

    # Build to force generate moc files.
    - ${CMAKE_COMMAND} --build --preset clang-debug

    # Run Clang Tidy
    - find module/ app/ -type f -name "*.cpp" -print0 | xargs -0 -P $(nproc --all) clang-tidy-18 -p build-debug

.build-base:
  image: $CI_REGISTRY/asxa86/images/ubuntu-dev:latest
  stage: build
  needs: []
  tags:
    - saas-linux-medium-amd64
  script:
    - *get-dependencies
    - *get-vcpkg

    # Build Aspire
    - ${CMAKE_COMMAND} --preset ${CMAKE_PRESET}
    - ${CMAKE_COMMAND} --build --preset ${CMAKE_PRESET}
  # artifacts:
  #   when: on_failure
  #   paths:
  #     - vcpkg/buildtrees/**/*.txt
  #     - vcpkg/buildtrees/**/*.log

build-clang-debug:
  extends: .build-base
  variables:
    CMAKE_PRESET: clang-debug
  artifacts:
    expire_in: 1 day
    paths:
      - build-debug

build-gcc-release:
  extends: .build-base
  variables:
    CMAKE_PRESET: gcc-release
  artifacts:
    expire_in: 1 day
    paths:
      - build-release

build-android-x64-debug:
  image: $CI_REGISTRY/asxa86/images/android-build:latest
  extends: .build-base
  variables:
    CMAKE_PRESET: android-x64-debug
  artifacts:
    expire_in: 1 day
    paths:
      - build-debug
    exclude:
      - build-debug/vcpkg_installed/**/*

build-android-armg64-debug:
  image: $CI_REGISTRY/asxa86/images/android-build:latest
  extends: .build-base
  variables:
    CMAKE_PRESET: android-arm64-debug
  artifacts:
    expire_in: 1 day
    paths:
      - build-debug
    exclude:
      - build-debug/vcpkg_installed/**/*

build-gcc-debug-sonar:
  image: $CI_REGISTRY/asxa86/images/ubuntu-dev:latest
  stage: build
  needs: []
  tags:
    # - saas-linux-medium-amd64
    - shelley
    - docker
    - large
  variables:
    CMAKE_PRESET: gcc-debug
  script:
    # Download sonar-scanner
    - curl -sSLo ./sonar-scanner.zip 'https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.1.0.4477-linux-x64.zip'
    - unzip -o sonar-scanner.zip
    - mv sonar-scanner-6.1.0.4477-linux-x64 sonar-scanner
    # Download build-wrapper
    - curl -sSLo ./build-wrapper-linux-x86.zip "${SONAR_HOST_URL}/static/cpp/build-wrapper-linux-x86.zip"
    - unzip -oj build-wrapper-linux-x86.zip -d ./build-wrapper
    # Run the build inside the build wrapper
    - *get-vcpkg
    - ${CMAKE_COMMAND} --preset ${CMAKE_PRESET}
    - build-wrapper/build-wrapper-linux-x86-64 --out-dir bw-output ${CMAKE_COMMAND} --build --preset ${CMAKE_PRESET}
    # Run the sonar-scanner in the same stage as the build
    - sonar-scanner/bin/sonar-scanner -Dsonar.host.url="${SONAR_HOST_URL}" -Dsonar.token="${SONAR_TOKEN}" -Dsonar.cfamily.compile-commands=bw-output/compile_commands.json

test-clang-debug:
  image: $CI_REGISTRY/asxa86/images/ubuntu-dev:latest
  stage: test
  needs:
    - build-clang-debug
  tags:
    # - saas-linux-medium-amd64
    - shelley
    - docker
    - large
  script:
    - *get-vcpkg
    - ${CMAKE_COMMAND} --build --preset clang-debug --target test
